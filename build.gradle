plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'application'
    id 'jacoco'
}

mainClassName = 'seedu.address.Main'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

checkstyle {
    toolVersion = '10.2'
}

//Test automation workflow inspired by CS2103-T16-3
test {
    jvmArgs += [
            '--add-opens', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    ]
    useJUnitPlatform()

    // Enhance logging for failed tests
    testLogging {
        events "failed"
        exceptionFormat = "short"
        showStandardStreams = true
    }
    doFirst {
        exclude "**/**UiTest*"
    }
    reports {
        html.required = true
    }
    doLast {
        def reportFile = file("${buildDir}/reports/tests/test/index.html")
        def osName = System.getProperty("os.name").toLowerCase()

        if (osName.contains("win")) {
            // For Windows
            def path = reportFile.absolutePath
            def driveLetter = path.charAt(0).toLowerCase()
            def remainingPath = path.substring(2).replace('\\', '/')
            println "\nTest report generated at: file:///${driveLetter}${remainingPath}"
        } else {
            // For macOS/Linux
            println "\nTest report generated at: file://${reportFile.absolutePath}"
        }
    }
    finalizedBy jacocoTestReport
}

tasks.register('uiTest', Test) {
    jvmArgs += [
            '--add-opens', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    ]
    doFirst {
        include "**/**UiTest*"
    }
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    def disallowedOS = ['ubuntu', 'nux']
    def os = System.getProperty("os.name").toLowerCase()
    def isAllowed = disallowedOS.every { !os.contains(it) }
    if (isAllowed) {
        dependsOn uiTest
    }
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    executionData(fileTree(dir: "$buildDir/jacoco", includes: ["**/*.exec"]))
    reports {
        html.required = true
        xml.required = true
    }

    doLast {
        def reportFile = file("${buildDir}/reports/jacoco/test/html/index.html")
        def osName = System.getProperty("os.name").toLowerCase()

        if (osName.contains("win")) {
            // For Windows
            def path = reportFile.absolutePath
            def driveLetter = path.charAt(0).toLowerCase()
            def remainingPath = path.substring(2).replace('\\', '/')
            println "\nTest coverage report generated at: file:///${driveLetter}${remainingPath}"
        } else {
            // For macOS/Linux
            println "\nTest coverage report generated at: file://${reportFile.absolutePath}"
        }
    }
}

task coverage(type: JacocoReport) {
    dependsOn jacocoTestReport
}

dependencies {
    String jUnitVersion = '5.4.0'
    String javaFxVersion = '17.0.7'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.7.4'

    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion
    testImplementation "org.testfx:testfx-core:4.0.17"
    testImplementation "org.testfx:testfx-junit5:4.0.17"
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-core:4.1.0'
    testImplementation 'org.mockito:mockito-inline:4.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
}

shadowJar {
    archiveFileName = 'EZSTATES.jar'
}

run {
    enableAssertions = true
}

defaultTasks 'clean', 'test'
