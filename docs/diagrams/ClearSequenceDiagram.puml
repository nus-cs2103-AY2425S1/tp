@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":ClearCommandParser" as ClearCommandParser LOGIC_COLOR
participant "c:ClearCommand" as ClearCommand LOGIC_COLOR
participant "r1:CommandResult" as CommandResult1 LOGIC_COLOR
participant "r2:CommandResult" as CommandResult2 LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("clear")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("clear")
activate AddressBookParser

create ClearCommandParser
AddressBookParser -> ClearCommandParser
activate ClearCommandParser

ClearCommandParser --> AddressBookParser
deactivate ClearCommandParser

AddressBookParser -> ClearCommandParser : parse("1")
activate ClearCommandParser

create ClearCommand
ClearCommandParser -> ClearCommand
activate ClearCommand

ClearCommand --> ClearCommandParser :
deactivate ClearCommand

ClearCommandParser --> AddressBookParser : c
deactivate ClearCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
ClearCommandParser -[hidden]-> AddressBookParser
destroy ClearCommandParser

AddressBookParser --> LogicManager : d
deactivate AddressBookParser

LogicManager -> ClearCommand : execute(m)
activate ClearCommand

create CommandResult1
ClearCommand -> CommandResult1
activate CommandResult1

CommandResult1 --> ClearCommand
deactivate CommandResult1

ClearCommand --> LogicManager : r1
deactivate ClearCommand

[<--LogicManager
deactivate LogicManager

alt Confirm
    [-> LogicManager : execute("yes")
    activate LogicManager

    LogicManager -> CommandResult1 : comfirmPrompt()
    activate CommandResult1

    CommandResult1 -> Model : reset()
    activate Model

    Model --> CommandResult1
    deactivate Model

    create CommandResult2
    CommandResult1 -> CommandResult2
    activate CommandResult2

    CommandResult2 --> CommandResult1
    deactivate CommandResult2

    CommandResult1 --> LogicManager : r2
    deactivate CommandResult1

    [<-- LogicManager
    deactivate LogicManager

else Cancel
    [-> LogicManager : execute("no")
    activate LogicManager

    [<-- LogicManager
    note right
    LogicManager returns a CommandResult
    with cancellation message
    endnote
    deactivate LogicManager

end
@enduml
